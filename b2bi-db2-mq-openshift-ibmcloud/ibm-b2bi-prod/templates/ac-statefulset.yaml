# (C) Copyright 2019 Syncsort Incorporated. All rights reserved.

{{ include "sch.config.init" (list . "b2bi.sch.chart.config.values") }}
{{- $resourcesPVCName := .Values.appResourcesPVC.name }}
{{- $logsPVCName := .Values.appLogsPVC.name }}
{{- $documentsPVCName := .Values.appDocumentsPVC.name }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "sch.names.statefulSetName" (list . .sch.chart.components.acServer.name) | quote }}
  labels:
    tier: {{ .Release.Name }}-backend
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.acServer.name) | indent 4 }}
{{- if .Values.ac.extraLabels }}
{{ toYaml .Values.ac.extraLabels | indent 4 }}
{{- end }}
    
spec:
  replicas: {{ .Values.ac.replicaCount }}
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.acServer.name) | indent 6 }}
      
  serviceName: {{ include "sch.names.fullCompName" (list . .sch.chart.components.headlessService.name) | quote }}
  template:
    metadata:
      labels:
        tier: {{ .Release.Name }}-backend
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.acServer.name) | indent 8 }}
{{- if .Values.ac.extraLabels }}
{{ toYaml .Values.ac.extraLabels | indent 8 }}
{{- end }} 
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering .sch.chart.metering.productMetric nil "ac") | indent 8 }}
    spec:
{{- if .Values.serviceAccount.create }} 
      serviceAccountName: {{ include "sch.names.fullCompName" (list . .sch.chart.components.podServiceAccount.name) | quote }}
{{- else }}
      serviceAccountName: {{ .Values.serviceAccount.name  | default "default" }}
{{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.podSecurityContext) | indent 8 }}
      volumes:
        {{- if .Values.appResourcesPVC.enabled }}
        - name: {{ .Values.appResourcesPVC.name }}
          persistentVolumeClaim:
            claimName: {{ include "sch.names.fullCompName" (list . $resourcesPVCName) | quote }}
        {{- end }} 
        {{- if not .Values.logs.enableAppLogOnConsole }}   
        - name: {{ .Values.appLogsPVC.name }}
          persistentVolumeClaim:
            claimName: {{ include "sch.names.fullCompName" (list . $logsPVCName) | quote }}
        {{- end }} 
        {{- if .Values.appDocumentsPVC.enabled }}
        - name: "{{ .Values.appDocumentsPVC.name }}"
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "sch.names.fullCompName" (list . $documentsPVCName) | quote }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- end }}
        - name: configmap-resources-volume
          configMap:
           name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.configmap.name) | quote }}
        - name: configmap-properties-volume
          configMap:
           name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.propertyConfigmap.name) | quote }}           
        - name: configmap-dummy-properties-volume
          configMap:
           name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.dummyPropertyConfigmap.name) | quote }}
        # extra configured volumes
        {{- range $i, $pvc := .Values.ac.extraPVCs }}
        - name: {{ $pvc.name }}
          persistentVolumeClaim:
            claimName: {{ include "sch.names.fullCompName" (list $ $pvc.name) | quote }}
        {{- end }}
      {{- if .Values.global.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.image.pullSecret }}
      {{- end }} 
      {{- if or (.Values.ac.extraInitContainers) (gt (.Values.asi.replicaCount|int) 0) }}     
      initContainers:
      {{- if gt (.Values.asi.replicaCount|int) 0 }}
      - name: init-wait-for-asi
        image: "{{ .Values.test.image.repository }}/{{ .Values.test.image.name }}:{{ .Values.test.image.tag }}"
        securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.containerSecurityContext) | indent 10 }}
        command: ['sh', '-c', 'while [ `curl -Lk --write-out "%{http_code}\n" --silent --output /dev/null "http://{{ include "sch.names.fullCompName" (list . .sch.chart.components.headlessService.name) }}:{{ .Values.setupCfg.basePort }}/dashboard"` -ne 200 ]; do sleep 15; done']
        resources:
          requests:
            memory: 128Mi
            cpu: 10m
          limits:
            memory: 128Mi
            cpu: 50m
      {{- end }}
      {{- if .Values.ac.extraInitContainers }}
      {{- range $i, $initContainer := .Values.ac.extraInitContainers }}
      - name: {{ $initContainer.name }}
        image: {{ $initContainer.image }}
        imagePullPolicy: {{ $initContainer.imagePullPolicy }}
        command: {{ $initContainer.command }}
      {{- end }}
      {{- end }}
      {{- end }}
      containers:
        - name: "ac"
          image: "{{ .Values.global.image.repository }}:{{ .Values.global.image.tag }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ add ($.Values.setupCfg.basePort|int) 85 }}
              protocol: TCP
            {{- if .Values.ac.frontendService.extraPorts}}
            {{- range $i, $port := .Values.ac.frontendService.extraPorts }}
            - name: {{ $port.name }}
              containerPort: {{ $port.targetPort }}
              protocol: {{ $port.protocol }}
            {{- end }}
            {{- end }}
            {{- if .Values.ac.backendService.ports}}
            {{- range $i, $port := .Values.ac.backendService.ports }}
            - name: {{ $port.name }}
              containerPort: {{ $port.targetPort }}
              protocol: {{ $port.protocol }}
            {{- end }}
            {{- end }}
            {{- if .Values.ac.backendService.portRanges}}
            {{- range $i, $portRange := .Values.ac.backendService.portRanges }}
            {{ $portRangeNumbers := split "-" $portRange.targetPortRange }}
            {{ $count := 0 }}
             {{- range untilStep ($portRangeNumbers._0|int) ((add ($portRangeNumbers._1|int) 1)|int) 1 }}
            {{ $count = add $count 1 }}
            - name: {{ $portRange.name }}-{{ $count }}
              containerPort: {{ . }}
              protocol: {{ $portRange.protocol }}
            {{- end }}
            {{- end }}
            {{- end }}
          env:
            - name: "TZ"
              value: "{{ .Values.env.tz }}"
            - name: "LICENSE"
              value: "{{ .Values.env.license }}"
            - name: "JAVA_TOOL_OPTIONS"
              value: "{{ .Values.ac.env.jvmOptions }}"
            - name: "NODE_NUMBER_IN_HOST"
              value: "true"
            - name: "SANDBOX_CC_INSTALL"
              value: {{ .Values.env.containerInstallation | default "true" | quote }}
            - name: "SANDBOX_CC_NODE_NAME"
              value: "node_b2biNodeNumber_AC1"
            - name: "SERVER_TYPE"
              value: "ac"              
            - name: "UPGRADE_COMPATIBILITY_VERIFIED"
              value: "{{ .Values.env.upgradeCompatibilityVerified }}"
            - name: "ENABLE_APP_LOG_ON_CONSOLE"
              value: "{{ .Values.logs.enableAppLogOnConsole }}"  
#            - name: "NODE_NUMBER"
#              valueFrom:
#                fieldRef:
#                  fieldPath: metadata.annotations['spec.pod.beta.kubernetes.io/statefulset-index']
            - name: "PROPERTY_ops_heartbeat"
              value: "{{ .Values.setupCfg.PROPERTY_ops_heartbeat | default 180 }}"
            - name: "PROPERTY_ops_nodeStatusCheckInterval"
              value: "{{ .Values.setupCfg.PROPERTY_ops_nodeStatusCheckInterval | default 30 }}"
            - name: "PROPERTY_ops_OpsServerU2022commandTimeout"
              value: "{{ (index .Values "setupCfg" "PROPERTY_ops_OpsServer.commandTimeout" ) | default 180 }}"
            - name: "SANDBOX_JGROUP_CLUSTER_MCAST2_DNS_QUERY"
              value: "_mcast2._tcp.{{ include "sch.names.fullCompName" (list . .sch.chart.components.headlessService.name) }}.{{ .Release.Namespace }}"
            - name: "SANDBOX_JGROUP_CLUSTER_DNS_RECORD_TYPE"
              value: "SRV"
          envFrom:
{{if .Values.setupCfg.systemPassphraseSecret}}
          - secretRef:
                name: "{{ .Values.setupCfg.systemPassphraseSecret }}"
{{ end }}
{{if .Values.setupCfg.dbSecret}}
          - secretRef:
                name: "{{ .Values.setupCfg.dbSecret }}"
{{ end }}
{{if .Values.setupCfg.jmsSecret}}
          - secretRef:
                name: "{{ .Values.setupCfg.jmsSecret }}"
{{ end }}
{{if .Values.setupCfg.libertySecret}}
          - secretRef:
                name: "{{ .Values.setupCfg.libertySecret }}"
{{ end }}
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            {{- if .Values.appResourcesPVC.enabled }} 
            - name: {{ .Values.appResourcesPVC.name }}
              mountPath: /ibm/resources
            {{- end }} 
            {{- if not .Values.logs.enableAppLogOnConsole }}  
            - name: {{ .Values.appLogsPVC.name }}
              mountPath: /ibm/trace
            {{- end }} 
            {{- if .Values.appDocumentsPVC.enabled }}  
            - name: {{ .Values.appDocumentsPVC.name }}
              mountPath: {{ .Values.appDocumentsPVC.mountPath | default "/ibm/b2bi/install/documents" }}
            {{- end }}
            {{- range $i, $volumeMount := .Values.ac.extraVolumeMounts }}
            - name: {{ $volumeMount.name }}
              mountPath: {{ $volumeMount.mountPath }}
            {{- end }}
            {{ end }}
            - name: configmap-resources-volume
              mountPath: /ibm/resources/setup.cfg
              subPath: setup.cfg
            - name: configmap-properties-volume
              mountPath: /ibm/b2bi/ext-resources/properties
            - name: configmap-dummy-properties-volume
              mountPath: /ibm/b2bi/ext-resources/dummy-properties
              
          args: ["b2bi_run", "ac"]
          resources:
            {{- toYaml .Values.ac.resources | nindent 12 }}
          securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.containerSecurityContext) | indent 12 }}
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - /ibm/b2bi/install/bin/b2biLivelinessCheck.sh ac
            initialDelaySeconds: {{ .Values.ac.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.ac.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.ac.livenessProbe.periodSeconds }}
          readinessProbe:
            tcpSocket:
              port: {{ add (.Values.setupCfg.basePort) 86 }}
            initialDelaySeconds: {{ .Values.ac.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.ac.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.ac.readinessProbe.periodSeconds }}
      
      affinity:
{{- include "b2bi.nodeAffinity" (list . .Values.ac.nodeAffinity) | indent 8 }}
{{- include "b2bi.podAffinity" (list . .Values.ac.podAffinity) | indent 8 }}
{{- include "b2bi.podAntiAffinity" (list . .Values.ac.podAntiAffinity) | indent 8 }}
